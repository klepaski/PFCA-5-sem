
LABA3

1. Перечислите основные глобальные объекты Node.js и поясните их предназначение.
	global - хранит var-данные на уровне модуля
	process - информация о среде выполнения, о текущем процессе
	buffer - класс Buffer – предназначен для работы с двоичными данными.
	console - используется для печати в stdout и stderr
Существуют только в составе модулей:
	exports - ссылка на module.exports
	module - ссылка на текущий модуль
	require - используется для импорта модулей

2. Поясните понятие «асинхронная функция».
	Асинхронная функция – это функция, после вызова которой JavaScript 
приложение продолжает работать, потому что функция сразу выполняет возврат.

3. Поясните понятие стандартные «системные потоки». 
	Эти потоки поставляются с node.js и могут быть использованы без подключения 
дополнительных библиотек.
process.stdin - поток на чтение содержит стандартный системный поток ввода.
process.stdout - поток на запись, содержащий стандартный системный вывод.
process.stderr - поток на запись, содержащий стандартный системный вывод ошибок. 

4. Поясните назначение функций process.nextTick, setImmediate, поясните в чем разница.
	Node.js является событийно-ориентированной системой. Все, что происходит в ноде,
является реакцией на события и события вызывают каскад колбеков. Этот механизм работает 
на основе библиотеки libuv и называется циклом событий (event loop).  
Цикл событий представляет собой процесс, состоящий из этапов (групп задач), которые 
выполняются по очереди. 
	setImmediate() предназначен для выполнения сценария после завершения текущей 
фазы опроса, отправляется к конец очереди.
	process.nextTick отправляется в начало очереди событий, чтобы она выполнялась 
сразу после завершения текущей функции.

Основное различие между setImmediate и process.nextTick заключается в том, что 
обратные вызовы setImmediate помещаются в цикл обработки событий, а process.nextTick нет.

process.nextTick() технически не является частью цикла событий. Вместо этого 
nextTickQueue будет обрабатываться после завершения текущей операции, независимо 
от текущей фазы цикла событий.

process.nextTick() срабатывает сразу на той же фазе
setImmediate() срабатывает на следующей итерации или «тике» цикла событий


LABA 4

1. Дайте пояснению понятию  «событие программного объекта». 
	- это процесс перехода  объекта из одного состояние в другое. При этом,  
об этом переходе могут быть извещены другие объекты. У события есть издатель 
(или генератор) события и могут быть подписчики (или обработчики) события.

2. Объясните механизм генерации и обработки событий в C#.
	События - элемент класса, позволяющий ему посылать другим объектам уведомления 
об изменении своего состояния. Класс, являющийся отправителем сообщения, публикует события,
которые он может инициировать, а другие классы, являющиеся получателями сообщения, 
подписываются на получение этих событий. При наступлении события издатель уведомляет 
подписчиков о событии, затем происходит обработка события подписчиком.
	События построены на основе делегатов: с помощью делегатов вызываются 
методы-обработчики событий. Поэтому создание события в классе состоит из следующих частей: 
	- Описание делегата, задающего сигнатуру обработчиков событий 
	- Описание события
	- Описание метода (методов), инициирующих событие
	Использование событий:
	- Подписка на событие
	- Описание метода-обработчика события (такая же сигнатура, как и у делегата)

3. Поясните как самостоятельно реализовать механизм генерации и обработки событий 
на JS или С++.
	JS: CustonEvent(type [, options])
	options:
		bubbles: true/false – если true, тогда событие всплывает.
		cancelable: true/false – если true, тогда можно отменить действие по умолчанию. 
		detail: инфа для передачи в событие
	После того, как объект события создан, мы должны запустить его на элементе, вызвав 
метод elem.dispatchEvent(event)
<body>
<h1 id="elem">Привет из кода!</h1>
<script>
  // ловим на document...
  document.addEventListener("hello", function(event) { // (1)
    alert("Привет от " + event.target.tagName); // Привет от H1
  });
  // ...запуск события на элементе!
  let event = new Event("hello", {bubbles: true}); // (2)
  elem.dispatchEvent(event);
  // обработчик на document сработает и выведет сообщение.
</script>
</body>
	Обратите внимание:
Мы должны использовать addEventListener для наших собственных событий, т.к. on<event>-
свойства существуют только для встроенных событий, то есть document.onhello не сработает.
Мы обязаны передать флаг bubbles:true, иначе наше событие не будет всплывать.

4. Какой встроенный механизм используется в Node.js для генерации и обработки событий. 
Поясните принцип его работы.   
	EventEmitter: JS-класс, предоставляющий функциональность для асинхронной 
обработки событий в Node.js.
	необходимо включения двух модулей: events и util.
	применяется в качестве базового для пользовательского объекта. Производный  
от EventEmitter объект может быть создан с помощью  функции inherits модуля  utils.
	производный от EventEmitter объект приобретает функциональность, позволяющую 
генерировать и прослушивать события.
	для генерации событий предназначена функция emit, а для прослушивания функция on.

var util = require('util');
var ee = require('events');
util.inherits(DB, ee.EventEmitter);
var db = new DB();
db.emit(...);
db.on(...);


LABA 5
1. setTimeout
	позволяет вызвать функцию один раз через определённый интервал времени.
2. setInterval
	позволяет вызывать функцию регулярно, повторяя вызов через определённый интервал времени.
3. ref
	противоположный unref
4. unref
	timer является второстепенным, не нужно проверять, не влияет на завершение процесса.


LABA 6


1. Поясните назначение npm.
	JavaScript Packet Manager, устанавливается вместе с Node.js, скачивание/публикация 
пакетов; инструмент командной строки;

2. Перечислите команды npm, с помощью которых можно просмотреть список установленных пакетов.
	npm list, ls, la, ll 

3. Поясните назначение параметра –g в командах npm.
	установить глобально

4. Перечислите команды npm,с помощью которых можно скачать пакет.            
	npm install name_package

5. Поясните назначение файла package.json.
	файл-манифест, содержит информацию о приложении: название, версия, зависимости;
любой директорий, в котором есть package.json, интерпретируется как Node.js-пакет.;  
способ использования файла package.json зависит от того, предполагается скачивание 
или публикации.

6. Перечислите последовательность действий, позволяющих опубликовать пакет с помощью npm.
	npm adduser
	можно проверить юзера npm whoami
	перейти в node_modules>m0603>
	npm init
	npm publish


LABA 7

1. Поясните аббревиатуру MIME, какой организацией поддерживаются допустимые MIME, 
в каких компонентах запросов и ответов используется MIME.  
	Multipurpose Internet Mail Extensions — многоцелевые расширения интернет-почты
	Стандарт, описывающий передачу различных типов данных по электронной почте
	Основной формат электронных сообщений определен в RFC 5322
	MIME определяет набор e-mail-заголовков для определения дополнительных атрибутов сообщения, 
включая тип контента, и определяет множество кодировок

2. Перечислите теги HTML, интерпретация которых приводит к HTTP-запросам.
	form

3. Перечислите способы выполнения HTTP-запросов из JS-сценария.
	fetch, xmlhttprequest, jquery(ajax)

4. Поясните  понятие «параметризованный модуль».
	модуль, который может принимать параметры